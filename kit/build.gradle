apply plugin: 'com.android.library'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 20220301
        versionName "5.2.0_opensource"
        buildConfigField "String", "IMSDK_VER", "${IMSDK_VER}"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        debug{
            buildConfigField("long", "VERSION_CODE", "${defaultConfig.versionCode}")
            buildConfigField("String","VERSION_NAME","\"${defaultConfig.versionName}\"")
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField("long", "VERSION_CODE", "${defaultConfig.versionCode}")
            buildConfigField("String","VERSION_NAME","\"${defaultConfig.versionName}\"")
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    packagingOptions {
        doNotStrip "*/armeabi/*.so"
        doNotStrip "*/armeabi-v7a/*.so"
        doNotStrip "*/arm64-v8a/*.so"
        doNotStrip "*/x86/*.so"
        doNotStrip "*/x86_64/*.so"
        doNotStrip "*/mips/*.so"
        doNotStrip "*/mips64/*.so"
    }

    lintOptions {
        abortOnError false
        baseline file("lint-baseline.xml")
    }
}

dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    api 'cn.rongcloud.sdk:im_lib:5.2.0'
    // 基础布局
    api 'androidx.appcompat:appcompat:1.2.0'
    api 'androidx.fragment:fragment:1.2.5'
    api 'androidx.recyclerview:recyclerview:1.1.0'
    api 'androidx.constraintlayout:constraintlayout:2.0.4'
    api 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    api "androidx.viewpager2:viewpager2:1.0.0"
    // content 协议头处理
    api "androidx.documentfile:documentfile:1.0.1"
    // 本地广播
    api 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'
    // 数据存储
    api "androidx.room:room-runtime:2.4.0"
    api "androidx.emoji2:emoji2:1.0.1"
    api "androidx.emoji2:emoji2-views-helper:1.0.1"
    annotationProcessor "androidx.room:room-compiler:2.4.0"
    // 图片加载
    api 'com.github.bumptech.glide:glide:4.11.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

// 生成 jar 名字
def JAR_NAME = "Rong_IMKit"
// 生成 jar 路径
def OUTPUT_PATH = "build/libs/"
// 执行 gradle makeJar 后生成发布的 kit.jar
// 执行脚本前，lib 如果有修改，要重新先编译 lib，否则，发布的版本 lib 非最新的
task makeJar(type: Jar) {
    from zipTree(file('build/intermediates/aar_main_jar/release/classes.jar'))
    // 去除编译生成的临时文件
    exclude('**/BuildConfig.class')
    exclude('**/BuildConfig\$*.class')
    exclude('**/R.class')
    exclude('**/R\$*.class')
    exclude('**/assets/**')
    exclude('**/assets/pushresources/**')
    exclude('**/assets/pushresources')
    exclude('**/assets')
    exclude('**/*_version')

    baseName JAR_NAME
    destinationDir file(OUTPUT_PATH)
}

task clearJar(type: Delete) {
    delete OUTPUT_PATH + JAR_NAME + '.jar'
}
makeJar.dependsOn(clearJar, build)

tasks.withType(JavaCompile) {
    options.compilerArgs += ["-parameters"]
}
//apply from: './bintray.gradle'
//apply from: './central-bintray.gradle'
